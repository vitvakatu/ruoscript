program = {
    soi ~ code_block ~ eoi
}

code_block = {
    statement*
}

statement = _{
    (fun_decl | fun_call | var_decl | var_assign | while_loop | for_loop | if_cond | return_stmt)
}

fun_decl = {
    "def" ~ identifier ~ lparen ~ arg_list ~ rparen ~ lcurly ~ code_block ~ rcurly
}

arg_list = _{
    identifier ~ ("," ~ identifier)* ~ ","?
}

var_decl = {
    identifier ~ ":=" ~ expr
}

var_assign = {
    identifier ~ "=" ~ expr
}

while_loop = {
    "while" ~ expr ~ lcurly ~ code_block ~ rcurly
}

for_loop = {
    "for" ~ identifier ~ "in" ~ expr ~ "," ~ expr ~ lcurly ~ code_block ~ rcurly
}

return_stmt = {
    "return" ~ expr
}

expr = _{
    (if_cond | fun_call | bin_expr)
}

fun_call = {
    identifier ~ lparen ~ call_arg_list ~ rparen
}

call_arg_list = _{
    expr? ~ ("," ~ expr)* ~ ","?
}

if_cond = {
    "if" ~ expr ~ lcurly ~ code_block ~ rcurly ~ ("else" ~ lcurly ~ code_block ~ rcurly)?
}

digit = {
    '0'..'9'
}

char = {
    'a'..'z' | 'A'..'Z'
}

identifier = @{
    !keywords ~ (char | "_") ~ (char | digit | "_")*
}

keywords = {
    "for" |
    "return" |
    "def" |
    "if" |
    "else" |
    "while" |
    "true" |
    "false" |
    "and" |
    "or" |
    "not"
}

opt_sign = _{
    ("+" | "-")?
}

int = @{
    opt_sign ~ digit+
}

float = @{
    opt_sign ~ digit+ ~ "." ~ digit+ ~ (^"e" ~ opt_sign ~ digit+)?
}

boolean = @{
    "true" | "false"
}

string = @{
    "\"" ~ (!"\"" ~ any)* ~ "\""
}

bin_op = _{
    op_add | op_sub | op_mul | op_div | op_pow |
    op_eq | op_neq | op_ge | op_gt | op_le | op_lt |
    op_and | op_or
}
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_pow = { "^" }
op_eq = { "==" }
op_neq = { "!=" }
op_ge = { ">=" }
op_gt = { ">" }
op_le = { "<=" }
op_lt = { "<" }
op_and = { "&&" | "and" }
op_or = { "||" | "or" }

un_op = _{
    op_not | op_minus
}
op_not = { "!" | "not" }
op_minus = { "-" }

bin_expr = {
    term ~ ( bin_op ~ term)*
}
term = _{
    primary | (lparen ~ bin_expr ~ rparen)
}
primary = _{
    un_op? ~ (fun_call | identifier | boolean | float | int | string)
}
lparen = _{ "(" }
rparen = _{ ")" }
lcurly = _{ "{" }
rcurly = _{ "}" }


whitespace = _{ " " | "\t" | "\n" }
comment = _{ "--" ~ (!newline ~ any)* }
newline = _{ "\n" }
