program = {
    soi ~ code_block ~ eoi
}

code_block = {
    statement*
}

statement = _{
    (fun_decl | fun_call | var_decl | var_assign | while_loop | for_loop | if_cond | return_stmt)
}

fun_decl = {
    "def" ~ identifier ~ lparen ~ arg_list ~ rparen ~ do_keyword ~ code_block ~ end_keyword
}

arg_list = _{
    identifier ~ ("," ~ identifier)* ~ ","?
}

var_decl = {
    identifier ~ ":=" ~ expr
}

var_assign = {
    identifier ~ "=" ~ expr
}

while_loop = {
    "while" ~ expr ~ do_keyword ~ code_block ~ end_keyword
}

for_loop = {
    "for" ~ identifier ~ "in" ~ expr ~ "," ~ expr ~ do_keyword ~ code_block ~ end_keyword
}

return_stmt = {
    "return" ~ expr
}

fun_call = {
    (regular_fun_call | unary_fun_call | binary_fun_call)
}

regular_fun_call = {
    identifier ~ lparen ~ call_arg_list ~ rparen
}

unary_fun_call = {
    identifier ~ expr
}

binary_fun_call = {
    expr ~ identifier ~ expr
}

call_arg_list = _{
    expr? ~ ("," ~ expr)* ~ ","?
}

if_cond = {
    "if" ~ expr ~ do_keyword ~ code_block ~ end_keyword ~ ("else" ~ do_keyword ~ code_block ~ end_keyword)?
}

digit = {
    '0'..'9'
}

char = {
    'a'..'z' | 'A'..'Z'
}

identifier = @{
    !keywords ~ (char | "_") ~ (char | digit | "_")*
}

keywords = {
    "do" |
    "end" |
    "for" |
    "return" |
    "def" |
    "if" |
    "else" |
    "while" |
    "true" |
    "false"
}

opt_sign = _{
    ("+" | "-")?
}

int = @{
    opt_sign ~ digit+
}

float = @{
    opt_sign ~ digit+ ~ "." ~ digit+ ~ (^"e" ~ opt_sign ~ digit+)?
}

boolean = @{
    "true" | "false"
}

string = @{
    "\"" ~ (!"\"" ~ any)* ~ "\""
}

expr = _{
    (if_cond | fun_call | primary)
}

primary = _{
    (identifier | boolean | float | int | string)
}

lparen = _{ "(" }
rparen = _{ ")" }
do_keyword = _{ "do" }
end_keyword = _{ "end" }


whitespace = _{ " " | "\t" | "\n" }
comment = _{ "--" ~ (!newline ~ any)* }
newline = _{ "\n" }
